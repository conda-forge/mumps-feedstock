{% set name = "mumps" %}
{% set version = "5.7.3" %}
{% set sha256 = "84a47f7c4231b9efdf4d4f631a2cae2bdd9adeaabc088261d15af040143ed112" %}
{% set build = 5 %}

{% set blas_impl = blas_impl or 'netlib' %}
{% if blas_impl != "netlib" %}
{% set build = build + 100 %}
{% endif %}

package:
  name: mumps
  version: {{ version }}

source:
  url: https://mumps-solver.org/MUMPS_{{ version }}.tar.gz
  sha256: {{ sha256 }}
  patches:
    - flang-support.patch

build:
  number: {{ build }}

requirements:
  build:
    # dummy unused top-level requirements
    # needed to construct the right conda-smithy matrix
    - {{ compiler('fortran') }}
    - {{ compiler('c') }}
    - m2-patch  # [win]
    - mpi * {{ mpi }}  # [mpi != 'nompi']

outputs:
  - name: mumps-include
    build:
      script: ${RECIPE_DIR}/build-headers.sh
      skip: true  # [win]
    requirements:
      build: []
      host: []
    test:
      commands:
        - test -f "${PREFIX}/include/mumps_compat.h"
        - test -f "${PREFIX}/include/mumps_int_def.h"

  - name: mumps-seq
    build:
      script: ${RECIPE_DIR}/build-mumps.sh  # [not win]
      script: "%RECIPE_DIR%\\bld-seq.bat"  # [win]
      run_exports:
        - {{ pin_subpackage('mumps-seq', max_pin='x.x.x') }}
      skip: true  # [mpi != 'nompi']
    requirements:
      build:
        - cmake  # [win]
        - m2-patch  # [win]
        - {{ compiler('fortran') }}
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - llvm-openmp  # [osx]
        - libgomp  # [linux]
        - make  # [unix]
        - pkg-config  # [unix]
        - patchelf  # [linux]
        # python version specified to avoid windows build matrix
        # not sure why that happens
        - python 3.11
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
      host:
        - libblas  # [blas_impl == "netlib"]
        - liblapack  # [blas_impl == "netlib"]
        # libblas needed for constraints
        - libblas * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - liblapack * *{{ blas_impl }}  # [blas_impl != "netlib"]
        # libopenblas is needed for run_exports
        # openblas is needed for linking at build time
        - libopenblas  # [blas_impl == "openblas"]
        - openblas  # [blas_impl == "openblas"]
        - mkl-devel  # [blas_impl == "mkl"]
        - metis  # [not win]
        - libscotch  # [not win]
      run:
        - {{ pin_subpackage('mumps-include', exact=True) }}  # [not win]
        - libblas * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - liblapack * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - libscotch  # [not win]
      run_constrained:
        - libopenblas * *openmp*

    test:
      source_files:
        - examples
      requires:
        - {{ compiler("c") }}  # [not win]
        - {{ compiler("fortran") }}  # [not win]
        - make  # [not win]
        - pkg-config  # [not win]
      commands:
        {% if not win %}

        {% for lib in [
          'smumps',
          'dmumps',
          'cmumps',
          'zmumps',
          'mumps_common',
          'pord',
        ] %}
        - test -f "${PREFIX}/lib/lib{{ lib }}_seq${SHLIB_EXT}"
        {% endfor %}
        - test -f "${PREFIX}/lib/libmpiseq_seq${SHLIB_EXT}"
        - test -f "${PREFIX}/lib/libmpiseq${SHLIB_EXT}"
        - test -f "${PREFIX}/include/mumps_seq/mpi.h"
        - test -f "${PREFIX}/include/mumps_seq/mpif.h"
        {% for lib in [
          'smumps_seq',
          'dmumps_seq',
          'cmumps_seq',
          'zmumps_seq',
        ] %}
        - test -f "${PREFIX}/lib/pkgconfig/{{ lib }}.pc"
        - PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig pkg-config --cflags {{ lib }}
        - PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig pkg-config --libs {{ lib }}
        {% endfor %}
        {% else %}
        {% for lib in [
          'smumps',
          'dmumps',
          'cmumps',
          'zmumps',
        ] %}
        - if not exist "%LIBRARY_PREFIX%\bin\{{ lib }}.dll" exit 1
        - if not exist "%LIBRARY_PREFIX%\lib\{{ lib }}.lib" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\{{ lib }}_c.h" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\{{ lib }}_struc.h" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\{{ lib }}_root.h" exit 1
        {% endfor %}
        - if not exist "%LIBRARY_PREFIX%\lib\mumps_common.lib" exit 1
        - if not exist "%LIBRARY_PREFIX%\lib\pord.lib" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\mumps_compat.h" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\mumps_int_def.h" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\mumps_seq\mpi.h" exit 1
        - if not exist "%LIBRARY_PREFIX%\include\mumps_seq\mpif.h" exit 1
        {% endif %}
        - bash ${RECIPE_DIR}/parent/run_test-seq.sh  # [not win]

  - name: mumps-mpi
    build:
      skip: true  # [win or mpi == 'nompi']
      script: ${RECIPE_DIR}/build-mumps.sh
      run_exports:
        - {{ pin_subpackage('mumps-mpi', max_pin='x.x.x') }}  # [not win]
      features:
    requirements:
      build:
        - {{ compiler('fortran') }}
        - {{ compiler('c') }}
        - {{ stdlib('c') }}
        - llvm-openmp  # [osx]
        - libgomp  # [linux]
        - make  # [unix]
        - pkg-config  # [unix]
        - {{ mpi }}  # [mpi == 'openmpi' and build_platform != target_platform]
        - patchelf  # [linux]
        - python
      host:
        - libblas  # [blas_impl == "netlib"]
        - liblapack  # [blas_impl == "netlib"]
        - libblas * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - liblapack * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - libopenblas  # [blas_impl == "openblas"]
        - openblas  # [blas_impl == "openblas"]
        - mkl-devel  # [blas_impl == "mkl"]
        - {{ mpi }}
        - metis
        - parmetis
        - libptscotch
        - scalapack
        - libscotch
      run:
        - {{ pin_subpackage('mumps-include', exact=True) }}
        - {{ mpi }}
        - libblas * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - liblapack * *{{ blas_impl }}  # [blas_impl != "netlib"]
        - parmetis
        - libptscotch
        - scalapack
        - libscotch
      run_constrained:
        - libopenblas * *openmp*

    test:
      source_files:
        - examples
      requires:
        - {{ compiler("c") }}
        - {{ compiler("fortran") }}
        - make  # [unix]
        - pkg-config  # [not win]
      commands:
        {% for lib in [
          'smumps',
          'dmumps',
          'cmumps',
          'zmumps',
          'mumps_common',
          'pord',
        ] %}
        - test -f "${PREFIX}/lib/lib{{ lib }}${SHLIB_EXT}"
        {% endfor %}
        - test ! -f "${PREFIX}/lib/libmpiseq*"
        - test ! -d "${PREFIX}/include/mumps_seq"
        {% for lib in [
          'smumps',
          'dmumps',
          'cmumps',
          'zmumps',
        ] %}
        - test -f "${PREFIX}/lib/pkgconfig/{{ lib }}.pc"
        - PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig pkg-config --cflags {{ lib }}
        - PKG_CONFIG_PATH=${PREFIX}/lib/pkgconfig pkg-config --libs {{ lib }}
        {% endfor %}
        - bash ${RECIPE_DIR}/parent/run_test-mpi.sh

about:
  home: https://mumps-solver.org
  license: CECILL-C
  license_file: LICENSE
  summary: 'MUMPS: a parallel sparse direct solver'
  description: |
    MUMPS (MUltifrontal Massively Parallel Solver) is a package for solving
    systems of linear equations of the form Ax = b, where A is a square sparse
    matrix that can be either unsymmetric, symmetric positive definite, or
    general symmetric, on distributed memory computers. MUMPS implements a
    direct method based on a multifrontal approach which performs a Gaussian
    factorization.
  doc_url: https://mumps-solver.org/index.php?page=doc

extra:
  recipe-maintainers:
    - traversaro
    - basnijholt
    - dalcinl
    - minrk
    - jbweston
    - davidbrochart
    - SylvainCorlay
